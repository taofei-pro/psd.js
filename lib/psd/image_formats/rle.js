// Generated by CoffeeScript 1.11.1
(function() {
  module.exports = {
    parseRLE: function() {
      this.byteCounts = this.parseByteCounts();
      return this.parseChannelData();
    },
    parseByteCounts: function() {
      var i, k, ref, results;
      results = [];
      for (i = k = 0, ref = this.channels() * this.height(); 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        if (this.header.version === 1) {
          results.push(this.file.readShort());
        } else {
          results.push(this.file.readInt());
        }
      }
      return results;
    },
    parseChannelData: function() {
      var i, k, ref, results;
      this.chanPos = 0;
      this.lineIndex = 0;
      results = [];
      for (i = k = 0, ref = this.channels(); 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        this.decodeRLEChannel();
        results.push(this.lineIndex += this.height());
      }
      return results;
    },
    decodeRLEChannel: function() {
      var byteCount, data, finish, j, k, len, ref, results, val;
      results = [];
      for (j = k = 0, ref = this.height(); 0 <= ref ? k < ref : k > ref; j = 0 <= ref ? ++k : --k) {
        byteCount = this.byteCounts[this.lineIndex + j];
        finish = this.file.tell() + byteCount;
        results.push((function() {
          var results1;
          results1 = [];
          while (this.file.tell() < finish) {
            len = this.file.read(1)[0];
            if (len < 128) {
              len += 1;
              data = this.file.read(len);
              this.channelData.set(data, this.chanPos);
              results1.push(this.chanPos += len);
            } else if (len > 128) {
              len ^= 0xff;
              len += 2;
              val = this.file.read(1)[0];
              this.channelData.fill(val, this.chanPos, this.chanPos + len);
              results1.push(this.chanPos += len);
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    }
  };

}).call(this);
