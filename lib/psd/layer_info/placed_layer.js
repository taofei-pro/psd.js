// Generated by CoffeeScript 1.11.1
(function() {
  var Descriptor, LayerInfo, UnicodeName, Util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  LayerInfo = require('../layer_info');

  Util = require('../util');

  Descriptor = require('../descriptor');

  module.exports = UnicodeName = (function(superClass) {
    extend(UnicodeName, superClass);

    UnicodeName.shouldParse = function(key) {
      return key === 'PlLd';
    };

    function UnicodeName(layer, length) {
      UnicodeName.__super__.constructor.call(this, layer, length);
      this.Trnf = [];
    }

    UnicodeName.prototype.parse = function() {
      var len;
      this.identifier = this.file.readString();
      this.version = this.file.readInt();
      len = Util.pad2(this.file.readByte());
      this.Idnt = this.file.readString(len);
      this.PgNm = this.file.parseInt();
      this.totalPages = this.file.parseInt();
      this.Annt = this.file.readInt();
      this.Type = this.file.readInt();
      this.parseTransformInfo();
      this.warpValue = this.file.readInt();
      this.file.seek(4, true);
      this.warpData = new Descriptor(this.file).parse();
      return this;
    };

    UnicodeName.prototype.parseTransformInfo = function() {
      var count, i, j, ref, results;
      count = 8;
      results = [];
      for (i = j = 0, ref = count; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        results.push(this.Trnf.push(this.file.readDouble()));
      }
      return results;
    };

    return UnicodeName;

  })(LayerInfo);

}).call(this);
