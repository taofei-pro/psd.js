// Generated by CoffeeScript 1.11.1
(function() {
  var Descriptor, LayerInfo, LinkedLayer, Util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  LayerInfo = require('../layer_info');

  Descriptor = require('../descriptor');

  Util = require('../util');

  module.exports = LinkedLayer = (function(superClass) {
    extend(LinkedLayer, superClass);

    LinkedLayer.shouldParse = function(key) {
      return key === 'lnk2';
    };

    function LinkedLayer(layer, length) {
      LinkedLayer.__super__.constructor.call(this, layer, length);
    }

    LinkedLayer.prototype.parse = function() {
      var creator, end, fileEnd, kind, length, obj, version;
      end = this.file.tell() + this.length;
      this.files = [];
      while (this.file.tell() < end) {
        obj = {};
        this.file.seek(4, true);
        length = 1 + Util.pad4(this.file.readInt());
        fileEnd = length + this.file.tell();
        kind = this.file.readString(4);
        version = this.file.readInt();
        obj.uuid = this.file.readString(this.file.readByte());
        obj.fileName = this.file.readUnicodeString();
        obj.fileType = this.file.readString(4);
        creator = this.file.readString(4);
        this.file.seek(4, true);
        obj.datasize = this.file.readInt();
        obj.openFile = this.file.readBoolean();
        if (obj.openFile === true) {
          this.file.seek(4, true);
          obj.openFile = new Descriptor(this.file).parse();
        }
        if (kind === 'liFD') {
          obj.fileData = this.file.read(obj.datasize);
        }
        if (version >= 5) {
          obj.childId = this.file.readUnicodeString();
        }
        if (version >= 6) {
          obj.modTime = this.file.readDouble();
        }
        if (version >= 7) {
          obj.lockedState = this.file.readBoolean();
        }
        this.files.push(obj);
        this.file.seek(fileEnd);
      }
      this.file.seek(end);
      return this.files;
    };

    return LinkedLayer;

  })(LayerInfo);

}).call(this);
